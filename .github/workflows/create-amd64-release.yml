# This is a basic workflow to help you get started with Actions

name: Create amd64 release

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    #tags: [ "v*" ]
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
    

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_al2023:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile Amazon Linux 2023 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/amzn2023/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:amazonlinux2023

      - uses: actions/upload-artifact@v4
        with:
          name: al2023-amd64
          path: ${{ github.workspace }}/output

  build_al2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile Amazon Linux 2 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/amzn2/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:amazonlinux2

      - uses: actions/upload-artifact@v4
        with:
          name: al2-amd64
          path: ${{ github.workspace }}/output

  build_al1:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile Amazon Linux 1 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/amzn1/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:amazonlinux1

      - uses: actions/upload-artifact@v4
        with:
          name: al1-amd64
          path: ${{ github.workspace }}/output

  build_el9:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile CentOS Stream 9 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/el7/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:centos-stream9

      - uses: actions/upload-artifact@v4
        with:
          name: el9-amd64
          path: ${{ github.workspace }}/output

  build_el8:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5
      - name: "Compile CentOS Stream 8 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/el7/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:centos-stream8

      - uses: actions/upload-artifact@v4
        with:
          name: el8-amd64
          path: ${{ github.workspace }}/output

  build_el7:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile CentOS 7 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/el7/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:centos7

      - uses: actions/upload-artifact@v4
        with:
          name: el7-amd64
          path: ${{ github.workspace }}/output

  build_el6:
    if: true
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Compile CentOS 6 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/el6/RPMS/x86_64 ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:centos6

      - uses: actions/upload-artifact@v4
        with:
          name: el6-amd64
          path: ${{ github.workspace }}/output

  build_el5:
    if: false
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v5

      - name: "Download packages for CentOS 5"
        run: |
          OPENSSHMIR=https://ftp.openbsd.org/pub/OpenBSD/OpenSSH/portable
          OPENSSLMIR=https://www.openssl.org/source/
          ASKPASSMIR=https://src.fedoraproject.org/repo/pkgs/openssh/x11-ssh-askpass-1.2.4.1.tar.gz/8f2e41f3f7eaa8543a2440454637f3c3
          PERLMIR=https://www.cpan.org/src/5.0
          source ${{ github.workspace }}/version.env
          pushd ${{ github.workspace }}/downloads
          curl -O -L -k $OPENSSLMIR/$OPENSSLSRC
          curl -O -L -k $OPENSSHMIR/$OPENSSHSRC
          curl -O -L -k $ASKPASSMIR/$ASKPASSSRC
          curl -O -L -k $PERLMIR/$PERLSRC
          popd

      - name: "Compile CentOS 5 (amd64)"
        run: |
          docker run --rm -v ${{ github.workspace }}/output:/data/el5/RPMS/x86_64 -v ${{ github.workspace }}/downloads:/data/downloads ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:centos5

      - uses: actions/upload-artifact@v4
        with:
          name: el5-amd64
          path: ${{ github.workspace }}/output

  create_release:
    needs:
      - build_al2023
      - build_al2
      - build_al1
      - build_el9
      - build_el8
      - build_el7
      - build_el6
      # - build_el5
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/download-artifact@v5
        with:
          name: al2023-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: al2-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: al1-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: el9-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: el8-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: el7-amd64
          path: ./output

      - uses: actions/download-artifact@v5
        with:
          name: el6-amd64
          path: ./output

      # - uses: actions/download-artifact@v5
      #   with:
      #     name: el5-amd64
      #     path: ./output

      - name: Publish release
        run: |
          set -xe
          sudo apt-get install \
            zip \
            unzip
          source version.env
          sudo timedatectl set-timezone Asia/Shanghai
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          echo -e "> Automated release OpenSSH_${OPENSSHVER} with OpenSSL_${OPENSSLVER}.\n" > ${{ github.workspace }}/RELEASE.md
          cat <<'EOF' >> ${{ github.workspace }}/RELEASE.md
          # Proxy download:
          ```bash
          curl -#Lo openssh-indiff.zip "https://ghproxy.cfd/https://github.com/indiff/openssh-rpms/releases/download/OpenSSH_shitver_shitstamp/openssh_el7_shitstamp.x86_64.zip"
          ```
            
          # Direct download:
          ```bash         
          curl -#Lo openssh-indiff.zip "https://github.com/indiff/openssh-rpms/releases/download/OpenSSH_shitver_shitstamp/openssh_el7_shitstamp.x86_64.zip"
          ```

          ```
          unzip openssh-indiff.zip -d openssh
          cd openssh

          # Backup current SSH config
          [[ -f /etc/ssh/sshd_config ]] && mv /etc/ssh/sshd_config /etc/ssh/sshd_config.$(date +%Y%m%d)

          # Install rpm packages. Exclude all debug packages.
          find . ! -name '*debug*' -name '*.rpm' | xargs sudo yum --disablerepo=* localinstall -y --allowerasing

          # fix by packages.
          yum install -y libICE libSM libX11 libXt
          yum update -y
          find . ! -name '*debug*' -name '*.rpm' | xargs sudo yum --disablerepo=* localinstall -y --skip-broken

          # in case host key files got permissions too open.
          chmod -v 600 /etc/ssh/ssh_host_*_key

          # For CentOS7+:
          # in some cases previously installed systemd unit file is left on disk after upgrade.
          # causes systemd mixing unit files and initscripts units provided by this package.
          if [[ -d /run/systemd/system && -f /usr/lib/systemd/system/sshd.service ]]; then
              mv /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/sshd.service.$(date +%Y%m%d)
              systemctl daemon-reload
          fi

          # Check Installed version:
          ssh -V && /usr/sbin/sshd -V

          # Restart service
          service sshd restart
          ```
          ```
          yum erase openssh-askpass openssh-keycat openssh-cavs openssh-askpass openssh-askpass-gnome openssh-debuginfo
          rpm -ivh --force --nodeps --replacepkgs --replacefiles openssh-*.rpm
          ```
          ```
          cat << 'EOF' > /etc/ssh/sshd_config
          Port 80
          Port 22
          AddressFamily inet
          PubkeyAcceptedAlgorithms +ssh-rsa
          PermitRootLogin yes
          PasswordAuthentication yes
          UseDNS no
          UsePAM yes
          TCPKeepAlive yes
          ClientAliveInterval 60
          ClientAliveCountMax 3
          #Subsystem sftp  internal-sftp
          Subsystem sftp  /usr/libexec/openssh/sftp-server
          KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group1-sha256,diffie-hellman-group14-sha1,diffie-hellman-group14-sha256,diffie-hellman-group15-sha256,diffie-hellman-group15-sha512,diffie-hellman-group16-sha256,diffie-hellman-group16-sha512,diffie-hellman-group17-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha512
          shitshit
          ```
          EOF
          sed -i "s/shitver/${OPENSSHVER}/g" RELEASE.md
          sed -i "s/shitstamp/${build_timestamp}/g" RELEASE.md
          sed -i 's/shitshit/EOF/g' RELEASE.md
          mkdir -p ${{ github.workspace }}/zip
          cd ${{ github.workspace }}/output/
          zip -q -9 ${{ github.workspace }}/zip/openssh_el7_${build_timestamp}.x86_64.zip ./*el7*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_el6_${build_timestamp}.x86_64.zip ./*el6*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_el8_${build_timestamp}.x86_64.zip ./*el8*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_el9_${build_timestamp}.x86_64.zip ./*el9*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_amzn1_${build_timestamp}.x86_64.zip ./*amzn1*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_amzn2_${build_timestamp}.x86_64.zip ./*amzn2*x86_64.rpm
          zip -q -9 ${{ github.workspace }}/zip/openssh_amzn2023_${build_timestamp}.x86_64.zip ./*amzn2023*x86_64.rpm
          GITHUB_REF=${{ github.ref }}
          TAGNAME="OpenSSH_${OPENSSHVER}_${build_timestamp}"
          NAME="${TAGNAME}"
          git tag -l --format='%(contents)' "${TAGNAME}" | tee -a ${{ github.workspace }}/RELEASE.md
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          gh release create "$TAGNAME" --target "main" -F ${{ github.workspace }}/RELEASE.md --title "$NAME" ${{ github.workspace }}/zip/*
        env:
          GITHUB_TOKEN: ${{ github.token }}
      # - name: Create Release
      #   id: create_release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "${{ github.workspace }}/output/*"
      #     bodyFile: ${{ github.workspace }}/RELEASE.md
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     allowUpdates: true
